name: Deploy Fullstack App to EKS

on:
  push:
    branches:
      - main

env:
  TF_DIR: terraform-eks
  APP_DIR: application
  REGION: ${{ secrets.AWS_REGION }}
  ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
  REPO_NAME: ${{ secrets.ECR_REPO_NAME }}
  VPC_ID: ${{ secrets.VPC_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.REGION }}

    - name: Install eksctl, kubectl, and helm
      run: |
        # eksctl
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" -o eksctl.tar.gz
        tar -xzf eksctl.tar.gz
        sudo mv eksctl /usr/local/bin

        # kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin

        # helm
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

    - name: Check Docker Version (preinstalled)
      run: docker --version

    - name: Authenticate Docker to ECR
      run: |
        aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com

    - name: Associate IAM OIDC
      run: |
        eksctl utils associate-iam-oidc-provider --region $REGION --cluster $CLUSTER_NAME --approve

    - name: Create IAM Policy for LB Controller
      run: |
        curl -o iam-policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json
        aws iam create-policy --policy-name AWSLoadBalancerControllerIAMPolicy --policy-document file://iam-policy.json || true

    - name: Create IAM Service Account for LB Controller
      run: |
        eksctl create iamserviceaccount \
          --cluster $CLUSTER_NAME \
          --namespace kube-system \
          --name aws-load-balancer-controller \
          --attach-policy-arn arn:aws:iam::$ACCOUNT_ID:policy/AWSLoadBalancerControllerIAMPolicy \
          --approve || true

    - name: Install Helm and AWS Load Balancer Controller
      run: |
        helm repo add eks https://aws.github.io/eks-charts
        helm repo update
        helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
          -n kube-system \
          --set clusterName=$CLUSTER_NAME \
          --set serviceAccount.create=false \
          --set serviceAccount.name=aws-load-balancer-controller \
          --set region=$REGION \
          --set vpcId=$VPC_ID || true

    - name: Build and Push Backend Image
      working-directory: ${{ env.APP_DIR }}/backend
      run: |
        docker build -t backendf1 .
        docker tag backendf1:latest $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$REPO_NAME:backendf1
        docker push $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$REPO_NAME:backendf1

    - name: Build and Push Frontend Image
      working-directory: ${{ env.APP_DIR }}/frontend
      run: |
        REACT_APP_BACKEND_URL=/api npm install
        REACT_APP_BACKEND_URL=/api npm run build
        docker build -t frontendf1 .
        docker tag frontendf1:latest $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$REPO_NAME:frontendf1
        docker push $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$REPO_NAME:frontendf1

    - name: Replace image lines in deployment files
      run: |
        sed -i "s|image: .*backend.*|image: $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$REPO_NAME:backendf1|" $APP_DIR/k8s/backend-deployment.yaml
        sed -i "s|image: .*frontend.*|image: $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$REPO_NAME:frontendf1|" $APP_DIR/k8s/frontend-deployment.yaml

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f $APP_DIR/k8s/backend-deployment.yaml
        kubectl apply -f $APP_DIR/k8s/frontend-deployment.yaml
        kubectl apply -f $APP_DIR/k8s/ingress.yaml

    - name: Get Ingress
      run: kubectl get ingress
